I"x<blockquote>
  <p>递归是一种解决问题的有效方法，在递归过程中，函数将自身作为子例程调用。</p>
</blockquote>

<h1 id="递归原理">递归原理</h1>
<blockquote>
  <p>你可能想知道如何实现调用自身的函数。诀窍在于，每当递归函数调用自身时，它都会将给定的问题拆解为子问题。递归调用继续进行，直到子问题无需进一步递归就可以解决的地步。</p>
</blockquote>

<p>为了确保递归函数不会导致无限循环，它应该具有以下属性:</p>

<ul>
  <li>一个简单的基本案例(basic case)(或一些案例)–能够不适用递归来产生答案的终止方案。</li>
  <li>一组规则，也称作递推关系(recurrence relation), 可将所有其他情况拆分到基本案例。</li>
</ul>

<p>注意，函数可能会有多个位置进行自我调用。</p>

<h1 id="示例">示例</h1>
<p>让我们从一个简单的编程问题开始：</p>

<blockquote>
  <p>以相反的顺序打印字符串。</p>
</blockquote>

<p>你可以使用迭代的方法轻而易举第解决这个问题，即从字符串的最后一个字符开始遍历字符串。但是如何递归的解决它呢?</p>

<p>首先，我们可以将所需的函数定义为printReverse(str[0…n-1]),其中str[0]表示字符串中的第一个字符。然后我们可以分两步完成给定的任务:</p>

<ul>
  <li>1.printReverse(str[1…n-1]):以相反的顺序打印子字符串str[1…n-1].</li>
  <li>2.print(str[0]):打印字符串中的第一个字符。</li>
</ul>

<p>请注意，我们在第一步中调用函数本身，根据定义，它使函数递归。
下面给出了代码片段</p>
<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">printReverse</span><span class="p">(</span><span class="n">str</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">helper</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">helper</span><span class="p">(</span><span class="n">index</span> <span class="kt">int</span><span class="p">,</span> <span class="n">str</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="n">helper</span><span class="p">(</span><span class="n">index</span><span class="o">+</span><span class="m">1</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<p>非递归解法</p>
<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">reverseStrings</span><span class="p">(</span><span class="n">s</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">length</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">mid</span> <span class="o">:=</span> <span class="n">n</span><span class="o">/</span><span class="m">2</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">length</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="m">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="m">1</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>接下来，你将会发现一个与上述示例稍有不同的练习。你应该尝试使用递归来解决它。<br />
    <code class="language-plaintext highlighter-rouge">注意</code>: 对于本练习中，我们还在本”探索“章节中提供了详细的解决方案。</p>

<h1 id="递归函数">递归函数</h1>
<p>对于一个问题，如果存在递归解决方案，我们可以按照以下步骤来实施它。
举个例子，我们将问题定义为有待实现的函数F(x),其中X是函数的输入，同时也定义了问题的范围。</p>

<p>然后，在函数F(X)中，我们将会:-</p>

<p>1.将问题逐步分解成较小的范围，例如x0 属于 X, x1 属于 X, xn 属于 X;</p>

<p>2.调用函数F(x0),F(x1),…..,F(xn)递归地解决X的这些子问题;</p>

<p>3.最后，处理调用递归函数得到结果</p>

<h1 id="示例-1">示例</h1>
<p>为了进一步展示上述步骤，我们再举一个例子来说明如何递归的解决问题。</p>

<blockquote>
  <p>给定链表，交换两个相邻节点并返回其头结点。
例如，对于列表1-&gt;2-&gt;3-&gt;4,我们应当返回新列表2-&gt;1-&gt;4-&gt;3的头结点。</p>
</blockquote>

<p>我们可以定义函数swap(head)以实现解决方案,其中输入的参数head指向链表的头结点。而该函数应当返回将链表中每两个相邻节点交换后得到的新列表的头结点head。</p>

<p>按照我们上面列出的步骤，我们可以按下面的流程来实现函数:
    - 首先，我们交换列表中的前两个节点，也就是head 和head.Next
    - 然后我们以swap(head.next.next)的形式调用函数自身，以交换头两个节点之后列表的其余部分。
    - 最后，我们将步骤(2)中的子列表的返回头与步骤(1)中交换的两个节点相连，以形成新的链表。</p>

<p>作为练习，你可以尝试使用我们上面提供的步骤来实施解决方案。单击”两两交换链表中的节点”以尝试自己的解决方案。</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">ListNode</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Val</span> <span class="kt">int</span>
    <span class="n">Next</span> <span class="o">*</span><span class="n">ListNode</span>
<span class="p">}</span>
 
<span class="k">func</span> <span class="n">swapPairs</span><span class="p">(</span><span class="n">head</span> <span class="o">*</span><span class="n">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="n">ListNode</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">head</span> <span class="o">==</span> <span class="no">nil</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="n">Next</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">head</span>
    <span class="p">}</span>

    <span class="n">newHead</span> <span class="o">:=</span> <span class="n">head</span><span class="o">.</span><span class="n">Next</span>

    <span class="n">head</span><span class="o">.</span><span class="n">Next</span> <span class="o">=</span> <span class="n">swapPairs</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">Next</span><span class="o">.</span><span class="n">Next</span><span class="p">)</span>
    <span class="n">newHead</span><span class="o">.</span><span class="n">Next</span> <span class="o">=</span> <span class="n">head</span>

    <span class="k">return</span> <span class="n">newHead</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这些手势大都继承于<strong>UIGestureRecognizer</strong>类，（<code class="language-plaintext highlighter-rouge">UIScreenEdgePanGestureRecognizer</code>继承于<code class="language-plaintext highlighter-rouge">UIPanGestureRecognizer</code>类）,</p>

<p>需要说明的是这些手势只有一个是<strong>离散型手势</strong>，那就是<code class="language-plaintext highlighter-rouge">UITapGestureRecognizer</code>，一旦识别就无法取消，而且只会调用一次手势操作事件。</p>

<p>换句话说其他手势是<strong>连续型手势</strong>，而连续型手势的特点就是：会多次调用手势操作事件，而且在连续手势识别后可以取消手势。</p>

<p>从下图可以看出两者调用操作事件的次数是不同的：</p>

<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1fb0neee6mlj30dw0aldgf.jpg" alt="" /></p>

<p>这些手势类有着以下共同的方法:</p>

<p>创建方法：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (instancetype)initWithTarget:(nullable id)target action:(nullable SEL)action;
</code></pre></div></div>

<p>移除方法：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)removeTarget:(nullable id)target action:(nullable SEL)action;
</code></pre></div></div>

<p>添加事件：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)addTarget:(id)target action:(SEL)action;
</code></pre></div></div>

<p>还有下面这些属性等：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@property(nonatomic,readonly) UIGestureRecognizerState state;// 手势状态

typedef NS_ENUM(NSInteger, UIGestureRecognizerState) {
     UIGestureRecognizerStatePossible,   // 尚未识别是何种手势操作（但可能已经触发了触摸事件），默认状态
     UIGestureRecognizerStateBegan,      // 手势已经开始，此时已经被识别，但是这个过程中可能发生变化，手势操作尚未完成
     UIGestureRecognizerStateChanged,    // 手势状态发生转变
     UIGestureRecognizerStateEnded,      // 手势识别操作完成（此时已经松开手指）
     UIGestureRecognizerStateCancelled,  // 手势被取消，恢复到默认状态
     UIGestureRecognizerStateFailed,     // 手势识别失败，恢复到默认状态
     UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded // 手势识别完成，同UIGestureRecognizerStateEnded
 };

@property(nullable,nonatomic,weak) id &lt;UIGestureRecognizerDelegate&gt; delegate; // 代理

@property(nonatomic, getter=isEnabled) BOOL enabled; 
</code></pre></div></div>

<p>当然我们也可以自定义手势来实现特殊的需求，关于自定义手势可以看<a href="http://blog.csdn.net/mmoaay/article/details/47355709">这篇博客</a>.</p>

<p>接下来我们来看看这些常用手势的用法.</p>

<h4 id="uitapgesturerecognizer点按">UITapGestureRecognizer（点按）</h4>

<p>Tap手势有两个属性，</p>

<ul>
  <li>numberOfTapsRequired</li>
  <li>numberOfTouchesRequired：</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">numberOfTapsRequired</code>为触发事件需要点击的次数，默认是1；</p>

<p><code class="language-plaintext highlighter-rouge">numberOfTouchesRequired</code>为触发事件需要的几个手指点按，默认是1；</p>

<p>若都设置为2，就需要<code class="language-plaintext highlighter-rouge">两个</code>手指同时点按<code class="language-plaintext highlighter-rouge">2次</code>才会触发事件。</p>

<p>Tap手势也是我们最常用的手势之一, 比如点击ImageView跳转到其他界面，或者双击图片放大缩小等。</p>

<p>创建：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap:)];
    tap.numberOfTapsRequired = 2;
    tap.numberOfTouchesRequired = 1;
    [self.imageView addGestureRecognizer:tap];
</code></pre></div></div>

<h4 id="uipangesturerecognizer拖动">UIPanGestureRecognizer（拖动）</h4>

<p>Pan手势的属性和方法：</p>

<ul>
  <li>@property (nonatomic)          NSUInteger minimumNumberOfTouches __TVOS_PROHIBITED;</li>
  <li>@property (nonatomic)          NSUInteger minimumNumberOfTouches __TVOS_PROHIBITED;</li>
  <li>-(CGPoint)translationInView:(nullable UIView *)view;</li>
  <li>-(void)setTranslation:(CGPoint)translation inView:(nullable UIView *)view;</li>
  <li>-(CGPoint)velocityInView:(nullable UIView *)view;</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">translationInView:</code>方法获取<code class="language-plaintext highlighter-rouge">View</code>的偏移量；</p>

<p><code class="language-plaintext highlighter-rouge">setTranslation:</code>方法设置手势的偏移量；</p>

<p><code class="language-plaintext highlighter-rouge">velocityInView:</code>方法获取速度；</p>

<p>所以手势的创建方法都类似，这里就不在一一列举了。</p>

<h4 id="uiscreenedgepangesturerecognizer-边缘拖动">UIScreenEdgePanGestureRecognizer (边缘拖动)</h4>

<p>ScreenEdgePan继承于<code class="language-plaintext highlighter-rouge">UIPanGestureRecognizer</code>，在屏幕边缘滑动才会触发</p>

<ul>
  <li>@property (readwrite, nonatomic, assign) UIRectEdge edges;</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">edges</code>为指定边缘拖动触发的边，是一个枚举：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>typedef NS_OPTIONS(NSUInteger, UIRectEdge) {
    UIRectEdgeNone   = 0,
    UIRectEdgeTop    = 1 &lt;&lt; 0,
    UIRectEdgeLeft   = 1 &lt;&lt; 1,
    UIRectEdgeBottom = 1 &lt;&lt; 2,
    UIRectEdgeRight  = 1 &lt;&lt; 3,
    UIRectEdgeAll    = UIRectEdgeTop | UIRectEdgeLeft | UIRectEdgeBottom | UIRectEdgeRight
} NS_ENUM_AVAILABLE_IOS(7_0);
</code></pre></div></div>
<p>其他方法和Tap手势一致，主要用于像左右抽屉视图的变换等处理。</p>

<h4 id="uipinchgesturerecognizer捏合">UIPinchGestureRecognizer（捏合）</h4>
<p>Pinch手势有两个属性：</p>

<ul>
  <li>@property (nonatomic)          CGFloat scale;</li>
  <li>@property (nonatomic,readonly) CGFloat velocity;</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">scale</code>：捏合比例</p>

<p><code class="language-plaintext highlighter-rouge">velocity</code>:捏合速度 = <code class="language-plaintext highlighter-rouge">scale/second</code></p>

<h4 id="uirotationgesturerecognizer旋转">UIRotationGestureRecognizer（旋转）</h4>
<p>Rotation手势和Pinch手势类似，同样有两个手势：</p>

<ul>
  <li>@property (nonatomic)          CGFloat rotation;</li>
  <li>@property (nonatomic,readonly) CGFloat velocity;</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">rotation</code>:旋转弧度，注意，这里的单位是<strong>弧度</strong></p>

<p><code class="language-plaintext highlighter-rouge">velocity</code>:旋转速度</p>

<h4 id="uilongpressgesturerecognizer长按">UILongPressGestureRecognizer（长按）</h4>

<p>LongPress的属性：</p>

<ul>
  <li>@property (nonatomic) NSUInteger numberOfTapsRequired;      // Default is 0.</li>
  <li>@property (nonatomic) NSUInteger numberOfTouchesRequired __TVOS_PROHIBITED;   // Default is 1.</li>
  <li>@property (nonatomic) CFTimeInterval minimumPressDuration;</li>
  <li>@property (nonatomic) CGFloat allowableMovement;</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">numberOfTapsRequired</code>和<code class="language-plaintext highlighter-rouge">numberOfTouchesRequired</code>和Tap手势类似，都是指定触发需要的点击次数和手指数量，但是LongPress手势的<code class="language-plaintext highlighter-rouge">numberOfTapsRequired</code>是指定长按前需要点击的次数。</p>

<p><code class="language-plaintext highlighter-rouge">minimumPressDuration</code>:触发时间</p>

<p><code class="language-plaintext highlighter-rouge">allowableMovement</code>:允许长按时间触发前允许手指滑动的范围。若是你在长按时手指移动，该长按手势将会失败，<code class="language-plaintext highlighter-rouge">allowableMovement</code>设置你能容忍的滑动范围，默认是10.</p>

<h1 id="变形">变形</h1>
<hr />
<p>iOS的变形指的是图片的旋转、平移和缩放。这些变形可以和上面介绍的手势结合，完成许多变形操作。</p>

<p>说变形前我们来看看<strong>CGAffineTransform</strong>，<strong>CGAffineTransform</strong>为一个结构体：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct CGAffineTransform {
    CGFloat a, b, c, d;
    CGFloat tx, ty;
};
</code></pre></div></div>
<p>我们输出一个控件的<code class="language-plaintext highlighter-rouge">transform</code>看看</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NSLog(@"%@", NSStringFromCGAffineTransform(self.label.transform));
</code></pre></div></div>

<p>输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2016-12-22 17:01:19.211 手势[6489:1481987] [1, 0, 0, 1, 0, 0]
</code></pre></div></div>

<p>我们可以看到输出了一个长度为6的数组：<code class="language-plaintext highlighter-rouge">[1, 0, 0, 1, 0, 0]</code>，并且我们可以猜测对应结构体中的<code class="language-plaintext highlighter-rouge">[a, b, c, d, tx, ty]</code>，并且默认的<code class="language-plaintext highlighter-rouge">transform</code>值就是<code class="language-plaintext highlighter-rouge">[1, 0, 0, 1, 0, 0]</code>。</p>

<p>想进一步了解可以看这篇<a href="http://blog.csdn.net/ashiyanshi/article/details/48160429">《iOS CGAffineTransform详解》</a></p>

<p>对iOS控件进行变形实际就是对控件<code class="language-plaintext highlighter-rouge">transform</code>属性进行操作。</p>

<p>但是我们使用中，使用已经封装好的的API对控件进行变形处理。分别是：</p>

<ul>
  <li>CGAffineTransformScale()</li>
  <li>CGAffineTransformTranslate()</li>
  <li>CGAffineTransformRotate()</li>
</ul>

<p>和：</p>

<ul>
  <li>CGAffineTransformMakeScale（）</li>
  <li>CGAffineTransformMakeTranslate()</li>
  <li>CGAffineTransformMakeRotate()</li>
</ul>

<p>这些API都是对设置<code class="language-plaintext highlighter-rouge">CGAffineTransform</code>的一个封装，针对<code class="language-plaintext highlighter-rouge">[a, b, c, d, tx, ty]</code>中不同的位置进行操作。</p>

<p>下面我们在ViewController创建一个<code class="language-plaintext highlighter-rouge">UILabel</code>控件。然后对它进行变形操作。</p>

<p><img src="http://ww4.sinaimg.cn/large/006tNc79jw1fazplz4mvmj306x0cbt8m.jpg" alt="" /></p>

<h4 id="缩放">缩放</h4>

<p>首先来看一个缩放操作</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 缩放到90%（相对）
self.label.transform = CGAffineTransformScale(self.label.transform, 0.9, 0.9);
    
NSLog(@"%@", NSStringFromCGAffineTransform( self.label.transform));

</code></pre></div></div>

<p>输出：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2016-12-22 17:26:25.074 手势[6526:1564064] [0.90000000000000002, 0, 0, 0.90000000000000002, 0, 0]
2016-12-22 17:26:26.096 手势[6526:1564064] [0.81000000000000005, 0, 0, 0.81000000000000005, 0, 0]
2016-12-22 17:26:26.963 手势[6526:1564064] [0.72900000000000009, 0, 0, 0.72900000000000009, 0, 0]
2016-12-22 17:26:28.830 手势[6526:1564064] [0.65610000000000013, 0, 0, 0.65610000000000013, 0, 0]
</code></pre></div></div>

<p>我们再看看另一个缩放：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.label.transform = CGAffineTransformMakeScale(0.9, 0.9);

NSLog(@"%@", NSStringFromCGAffineTransform( self.label.transform));
</code></pre></div></div>

<p>输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2016-12-22 17:32:32.972 手势[6581:1600236] [0.90000000000000002, 0, 0, 0.90000000000000002, 0, 0]
2016-12-22 17:32:34.164 手势[6581:1600236] [0.90000000000000002, 0, 0, 0.90000000000000002, 0, 0]
2016-12-22 17:32:35.246 手势[6581:1600236] [0.90000000000000002, 0, 0, 0.90000000000000002, 0, 0]
</code></pre></div></div>

<p>对比可以发现<code class="language-plaintext highlighter-rouge">CGAffineTransformScale()</code>与<code class="language-plaintext highlighter-rouge">CGAffineTransformMakeScale()</code>的区别在于，<code class="language-plaintext highlighter-rouge">CGAffineTransformScale()</code>实在原理的基础上在进行缩放操作，而<code class="language-plaintext highlighter-rouge">CGAffineTransformMakeScale()</code>直接将缩放值设定为0.9不变了。</p>

<p>缩放操作变动的是构体中<code class="language-plaintext highlighter-rouge">[a, b, c, d, tx, ty]</code>的<code class="language-plaintext highlighter-rouge">a</code>和<code class="language-plaintext highlighter-rouge">d</code>，值和变形系数<code class="language-plaintext highlighter-rouge">Scale</code>是相对应的，大于1是放大，小于1是缩小。。</p>

<p><code class="language-plaintext highlighter-rouge">a</code>是横向缩放， <code class="language-plaintext highlighter-rouge">d</code>是纵向缩放。</p>

<h4 id="平移">平移</h4>

<p>先来看一个平移操作：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.label.transform = CGAffineTransformTranslate(self.label.transform, 10, 10);
    NSLog(@"%@", NSStringFromCGAffineTransform( self.label.transform));
</code></pre></div></div>
<p>输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2016-12-22 17:40:38.568 手势[6608:1631232] [1, 0, 0, 1, 10, 10]
2016-12-22 17:40:40.833 手势[6608:1631232] [1, 0, 0, 1, 20, 20]
2016-12-22 17:40:41.834 手势[6608:1631232] [1, 0, 0, 1, 30, 30]
2016-12-22 17:40:42.532 手势[6608:1631232] [1, 0, 0, 1, 40, 40]
2016-12-22 17:40:43.162 手势[6608:1631232] [1, 0, 0, 1, 50, 50]
</code></pre></div></div>

<p>我们可以看到label往右下角移动</p>

<p><img src="http://ww1.sinaimg.cn/large/006tNc79jw1fazply7kkpj306v0ca0sp.jpg" alt="" /></p>

<p>对应xy的正向坐标为右下角。</p>

<h4 id="旋转">旋转</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.label.transform = CGAffineTransformRotate(self.label.transform, M_PI_2);
NSLog(@"%@", NSStringFromCGAffineTransform( self.label.transform));
</code></pre></div></div>
<p>输出：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2016-12-22 17:59:43.680 手势[6667:1717130] [6.123233995736766e-17, 1, -1, 6.123233995736766e-17, 0, 0]
</code></pre></div></div>

<p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fazq3j2ud5j306z0cfdft.jpg" alt="" /></p>

<p>可以看到<code class="language-plaintext highlighter-rouge">label</code>顺时针旋转了<code class="language-plaintext highlighter-rouge">π/2</code>弧度（90°）。</p>

<h1 id="手势结合变形">手势结合变形</h1>
<hr />
<p>手势结合变形就是通过手势对控件变形处理。</p>

<p>上代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#import "ViewController.h"

@interface ViewController ()&lt;UIGestureRecognizerDelegate&gt;
@property (weak, nonatomic) IBOutlet UIImageView *imageView;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
//    CGAffineTransform *mytransform = self.imageView.transform;
    self.imageView.userInteractionEnabled = YES;
    //1双击 恢复
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap:)];
    tap.numberOfTapsRequired = 2;
    tap.numberOfTouchesRequired = 1;
    [self.imageView addGestureRecognizer:tap];
    
    //2拖拽
    UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(pan:)];
//    pan.delegate = self;
    [self.imageView addGestureRecognizer:pan];
    
    //3捏合
    UIPinchGestureRecognizer *pinch = [[UIPinchGestureRecognizer alloc]initWithTarget:self action:@selector(pinch:)];
    pinch.delegate = self;
    [self.imageView addGestureRecognizer:pinch];
    
    //4旋转
    UIRotationGestureRecognizer *rotaion = [[UIRotationGestureRecognizer alloc]initWithTarget:self action:@selector(rotaion:)];
//    pinch.delegate = self;
    [self.imageView addGestureRecognizer:rotaion];
    
    // 长按
    UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPress:)];
    longPress.numberOfTapsRequired = 0;
    longPress.minimumPressDuration = 1;
//    longPress.allowableMovement = 3;
    [self.imageView addGestureRecognizer:longPress];
    
}
- (void)tap:(UITapGestureRecognizer *)sender{
    
    NSLog(@"tap！");
    
    //恢复
    self.imageView.transform = CGAffineTransformIdentity;
    
}
- (void)pan:(UIPanGestureRecognizer *)sender{
//    CGPoint center = self.imageView.center;
//    if (center.x &lt; 0){
//        center.x = 0;
//    }else{
//        center.x += [sender translationInView:self.view].x;
//    }
//    
//    center.y += [sender translationInView:self.view].y;
//    self.imageView.center = center;
    //将相对偏移量清零
//    [sender setTranslation:CGPointMake(0, 0) inView:self.view];
    
    self.imageView.transform = CGAffineTransformTranslate(self.imageView.transform, [sender translationInView:self.imageView].x, [sender translationInView:self.imageView].y);
    [sender setTranslation:CGPointZero inView:self.view];
    
}

- (void)pinch:(UIPinchGestureRecognizer *)sender{
    
    CGFloat  scale = sender.scale;
    self.imageView.transform = CGAffineTransformScale(self.imageView.transform, scale, scale);
    [sender setScale:1];
   
}

- (void)rotaion:(UIRotationGestureRecognizer *)sender{
    //获取旋转弧度
    CGFloat rotation = sender.rotation;
    self.imageView.transform = CGAffineTransformRotate(self.imageView.transform, rotation);
    sender.rotation = 0;
    
//    self.imageView.transform = CGAffineTransformMakeRotation(sender.rotation);
    
}

- (void)longPress:(UILongPressGestureRecognizer *)sender {
    
    NSLog(@"longPress:%@", sender);
    
    // 判断长按事件触发
    if (sender.state == UIGestureRecognizerStateBegan) {
        self.imageView.transform = CGAffineTransformMake(1, 0, 0, 1, 0, 0);
    }
    
}


//希望两个手势共存
//遵守 UIGestureRecognizerDelegate 协议
//实现方法 -(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
//将要同时实现的手势设置代理 pinch.delegate = self; pinch.delegate = self;

-(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer{
    return YES;
}

</code></pre></div></div>

<p>有几点需要注意：</p>

<ul>
  <li>给本身没有交互功能的控件（）imagView, UIlabel, View等）添加手势，要设置<code class="language-plaintext highlighter-rouge">userInteractionEnabled</code>为<strong>YES</strong>，否则识别不了手势</li>
  <li>想要手势共存需要：
    <ul>
      <li>遵守 <code class="language-plaintext highlighter-rouge">UIGestureRecognizerDelegate</code> 协议</li>
      <li>实现<code class="language-plaintext highlighter-rouge">-(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer</code>方法，返回<code class="language-plaintext highlighter-rouge">YES</code></li>
      <li>将要同时实现的手势设置代理 <code class="language-plaintext highlighter-rouge">pinch.delegate = self</code>; <code class="language-plaintext highlighter-rouge">pinch.delegate = self</code></li>
    </ul>
  </li>
</ul>

<h1 id="在storyboard中添加手势">在storyboard中添加手势</h1>

<p>在<code class="language-plaintext highlighter-rouge">storyboard</code>的控件栏中我们可以看到这些手势控件：</p>

<p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1fb0j188yh1j30780evwfq.jpg" alt="storyboard中的手势控件" /></p>

<h4 id="使用方法">使用方法：</h4>

<ol>
  <li>
    <p>直接将手势控件拖到要添加的视图上</p>

    <p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1fb0ja1f8fnj30f206nwev.jpg" alt="" /></p>
  </li>
  <li>
    <p>关联手势事件</p>

    <p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fb0jaxllv6j30ol0be77b.jpg" alt="" /></p>
  </li>
  <li>
    <p>设置手势属性</p>

    <p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fb0jc5mon3j307c06ydgd.jpg" alt="" /></p>
  </li>
</ol>

<p>注意：若想同时识别多个手势，方法和上面相同，遵循协议，实现方法，设置代理，不过代理可以手动关联。</p>

<p><img src="http://ww4.sinaimg.cn/large/006tNc79gw1fb0jokip2vj30ej0aq3zz.jpg" alt="" /></p>

:ET