I"W
<hr />
<p>layout:     post
title:      Web端即时通讯技术原理1
subtitle:   原理和过程分析
date:       2020-02-01
author:     fengfeng
header-img: img/post-bg-re-vs-ng2.jpg
catalog: true
tags:
    - IM
    - 即时通讯
    - Web开发
—</p>

<h2 id="前言">前言</h2>

<p>有关<code class="language-plaintext highlighter-rouge">IM(InstantMessage)</code>聊天应用(如: 微信, QQ),消息推送技术(如：现今移动端App标配的消息推送模块)等即时通讯应用场景下，大多数都是桌面应用程序或者native应用较为流行。</p>

<p>而Web端的IM应用，由于浏览器的兼容性以及其固有的”客户端请求服务器处理并响应”的通信模型，造成了要在浏览器中实现一个兼容性较好的IM应用, 其通信过程必然是诸多技术的组合，本文的目的就是要详细探讨这些技术并分析其原理和过程。</p>

<h2 id="一传统web的通信原理">一·传统Web的通信原理</h2>
<p>浏览器本身作为一个瘦客户端，不具备直接通过系统调用来达到和处于异地的另外一个客户端浏览器通信的功能。这和我们桌面应用的工作方式是不同的，通常桌面应用通过socket可以和远程主机上另外一端的一个进程建立TCP连接，从而达到全双工的即时通信。</p>

<p>浏览器从诞生开始一直走的是客户端请求服务器，服务器返回的模式，即使发展至今仍然没有任何改变。所以肯定的是，要想实现两个客户端的通信，必然要通过服务器进行信息的转发。例如A要和B通信，则应该是A先把信息发送给IM应用服务器，服务器根据A信息中携带的接收者将它再转发给B,同样B到A也是这种模式，如下是所示:</p>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giex6zrgc6j30h90eijsv.jpg" alt="" /></p>

<p>打开Mac下自带的软件 <strong>Automator</strong></p>

<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fckb184f74j319v0q01kx.jpg" alt="" /></p>

<p>新建文稿</p>

<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fckb6zzo28j30mo0fvgn7.jpg" alt="" /></p>

<p>创建一个服务</p>

<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fckb93qmy5j30g00fh0vq.jpg" alt="" /></p>

<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fckbfe8o0zj30t10lb0wv.jpg" alt="" /></p>

<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fckbff4e7pj30t10lbwis.jpg" alt="" /></p>

<p>修改框内的脚本</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>on run {input, parameters}
    tell application "Terminal"
        reopen
        activate
    end tell
end run

</code></pre></div></div>

<p>运行：<code class="language-plaintext highlighter-rouge">command + R</code>，如果没有问题，则会打开终端</p>

<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fckaqdd2m1j30t10lb42a.jpg" alt="" /></p>

<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fckaq4nn9hj30iy0daaan.jpg" alt="" /></p>

<p>保存：<code class="language-plaintext highlighter-rouge">Command + S</code>，将其命名为<code class="language-plaintext highlighter-rouge">打开终端</code>或你想要的名字</p>

<p>设置快捷键</p>

<p>在 <strong>系统偏好设置</strong> -&gt; <strong>键盘设置</strong> -&gt; <strong>快捷键</strong> -&gt; <strong>服务</strong></p>

<p>选择我们创建好的 ‘<strong>打开终端</strong>‘，设置你想要的快捷键，比我我设置了<code class="language-plaintext highlighter-rouge">⌘+空格</code></p>

<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fckbvaixhnj30kw0ihq67.jpg" alt="" /></p>

<p>到此，设置完成。</p>

<p>聪明的你也许会发现，这个技巧能为所有的程序设置快捷启动。</p>

<p>将脚本中的 <code class="language-plaintext highlighter-rouge">Terminal</code> 替换成 其他程序就可以</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>on run {input, parameters}
    tell application "Terminal"
        reopen
        activate
    end tell
end run

</code></pre></div></div>

<h2 id="黑技能">黑技能</h2>

<p>既然学了 <code class="language-plaintext highlighter-rouge">Automator</code> ，那就在附上一个黑技能吧。为你的代码排序。在 <strong>Xcode8</strong>以前，有个插件能为代码快速排序，不过时过境迁~ 对于没用的插件而且又有患有强迫症的的小伙伴，只能手动排序了（😂）.</p>

<p>首先还是创建一个服务</p>

<p>创建一个<code class="language-plaintext highlighter-rouge">Shell</code>脚本，</p>

<p>勾选:<code class="language-plaintext highlighter-rouge">用输出内容替换所选文本</code></p>

<p>输入：<code class="language-plaintext highlighter-rouge">sort|uniq</code></p>

<p>保存： 存为<code class="language-plaintext highlighter-rouge">Sort &amp; Uniq</code></p>

<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fckd40rgwmj30rt0ildiy.jpg" alt="" /></p>

<p><strong>选中你的代代码</strong> -&gt; <strong>鼠标右键</strong> -&gt; <strong>Servies</strong> -&gt; <strong>Sort&amp;Uniq</strong></p>

<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fckd6tx1dzj30h90b7mzm.jpg" alt="" /></p>

<p>排序后的代码：</p>

<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fckd6lak55j309j05y3yo.jpg" alt="" /></p>

:ET