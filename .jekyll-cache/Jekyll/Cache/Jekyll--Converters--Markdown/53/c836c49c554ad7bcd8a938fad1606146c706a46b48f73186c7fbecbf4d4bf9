I"f<h2 id="列出镜像">列出镜像</h2>

<p>要想列出已经下载下来的镜像，可以使用 docker image ls 命令。
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jgwfa5fj31d20icjwa.jpg" alt="" /></p>

<p>列表包含了 <code class="language-plaintext highlighter-rouge">仓库名</code>、<code class="language-plaintext highlighter-rouge">标签</code>、<code class="language-plaintext highlighter-rouge">镜像 ID</code>、<code class="language-plaintext highlighter-rouge">创建时间</code><code class="language-plaintext highlighter-rouge"> 以及 </code>所占用的空间<code class="language-plaintext highlighter-rouge">。
其中</code>仓库名<code class="language-plaintext highlighter-rouge">、</code>标签<code class="language-plaintext highlighter-rouge">在之前的基础概念章节已经介绍过了。</code>镜像 ID<code class="language-plaintext highlighter-rouge"> 则是镜像的唯一标识，一个镜像可以对应多个 </code>标签<code class="language-plaintext highlighter-rouge">。因此，在上面的例子中，我们可以看到 </code>ubuntu:18.04<code class="language-plaintext highlighter-rouge"> 和 </code>ubuntu:latest` 拥有相同的 ID，因为它们对应的是同一个镜像。</p>

<h2 id="镜像体积">镜像体积</h2>

<ul>
  <li>如果仔细观察，会注意到，这里标识的所占用空间和在 <code class="language-plaintext highlighter-rouge">Docker Hub</code> 上看到的镜像大小不同。比如，<code class="language-plaintext highlighter-rouge">ubuntu:18.04</code> 镜像大小，在这里是 <code class="language-plaintext highlighter-rouge">127 MB</code>，但是在<code class="language-plaintext highlighter-rouge">Docker Hub</code> 显示的却是 50 MB。</li>
  <li>这是因为 <code class="language-plaintext highlighter-rouge">Docker Hub</code> 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code class="language-plaintext highlighter-rouge">docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</li>
  <li>另外一个需要注意的问题是，<code class="language-plaintext highlighter-rouge">docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 <code class="language-plaintext highlighter-rouge">Docker</code> 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 <code class="language-plaintext highlighter-rouge">Docker</code> 使用 <code class="language-plaintext highlighter-rouge">Union FS</code>，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。
你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。</li>
</ul>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jlgd2n0j31fw0gcwia.jpg" alt="" /></p>

<h2 id="虚悬镜像">虚悬镜像</h2>
<p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像即没有仓库名，也没有标签，均为<code class="language-plaintext highlighter-rouge">&lt;none&gt;</code>。
![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k14q7l9j31d20bcwgb.jpg<br />
这个镜像原本是有镜像名和标签的，原来为 <code class="language-plaintext highlighter-rouge">mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code class="language-plaintext highlighter-rouge">docker pull mongo:3.2</code> 时，<code class="language-plaintext highlighter-rouge">mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code class="language-plaintext highlighter-rouge">&lt;none&gt;</code>。除了 <code class="language-plaintext highlighter-rouge">docker pull</code> 可能导致这种情况，<code class="language-plaintext highlighter-rouge">docker build </code>也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code class="language-plaintext highlighter-rouge">&lt;none&gt;</code><code class="language-plaintext highlighter-rouge"> 的镜像。这类无标签镜像也被称为 虚悬镜像(</code>dangling image`) ，可以用下面的命令专门显示这类镜像：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k2ri8d5j31cm0dcdii.jpg)

一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k3jl73lj30hq0bc75j.jpg)
</code></pre></div></div>

<h2 id="中间层镜像">中间层镜像</h2>

<p>为了加速镜像构建、重复利用资源，<code class="language-plaintext highlighter-rouge">Docker</code> 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code class="language-plaintext highlighter-rouge">docker image ls </code>列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code class="language-plaintext highlighter-rouge">-a</code> 参数。</p>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5l1fnkblj30xs0bcq4f.jpg" alt="" /></p>

<p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p>

<h2 id="列出部分镜像">列出部分镜像</h2>

<p>不加任何参数的情况下，<code class="language-plaintext highlighter-rouge">docker image ls</code> 会列出所有顶层镜像，但是有时候我们只希望列出部分镜像。<code class="language-plaintext highlighter-rouge">docker image ls</code> 有好几个参数可以帮助做到这个事情。</p>

<h3 id="根据仓库名列出镜像">根据仓库名列出镜像</h3>
:ET