I"[<h2 id="前言">前言</h2>

<p>现在这个时代大家可能最关心的就是钱了，那么有没有想过你银行转账给你买呀一次是转多的，要么失败，要么成功，为什么不能失误一下多转一笔呢?醒醒吧年轻人，别做梦了，做银行的能有那么傻x吗?</p>

<p>今天我们就来谈一谈为什么银行转账不能给我多转一笔? 关乎到钱的问题，小伙伴们打起精神！！！</p>

<p>要想要理解上述的疑惑，不得不提的一个概念就是幂等性，至于什么是幂等性，如何通过代码实现幂等性，下面将会详细讲述。</p>

<h2 id="什么是幂等性">什么是幂等性?</h2>

<p>所谓幂等性， 通俗的讲就是一次请求和多次请求同一个资源产生相同的副作用。用数学语言表达就是f(x)=f(f(x))。</p>

<blockquote>
  <p>维基百科的幂等性的定义如下:</p>
  <ul>
    <li>1.幂等(idempotent、idempotence)是一个数学与计算机学概念，常见于抽象代数中。</li>
    <li>2.在编程中一个幂等操作的特点是其任意多次执行所产生的的影响均与一次执行的影响相同.</li>
    <li>3.幂等函数、或者幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会  影响系统状态，也不用担心重复执行对系统造成改变.</li>
    <li>4.就是一个幂等函数，无论多次执行，其结果都是一样的，更复杂的操作幂等保证是利用唯一交易号(流水号)实现。</li>
  </ul>
</blockquote>

<h2 id="为什么需要幂等性">为什么需要幂等性</h2>

<p>在系统高并发的环境下，很有可能因为网络，阻塞等等问题导致客户端或者调用方并不能及时的收到服务端的反馈甚至是调用超时的问题。总之，就是请求方调用了你的服务，但是没有收到任何的信息，完全懵逼的状态。比如订单的问题，可能会遇到如下的几个问题：</p>

<blockquote>
  <ol>
    <li>创建订单时，第一次调用服务超时，再次调用是否产生两笔订单？</li>
    <li>订单创建成功去减库存时，第一次减库存超时，是否会多扣一次？</li>
    <li>订单支付时，服务端扣钱成功，但是接口反馈超时，此时再次调用支付，是否会多扣一笔呢？</li>
  </ol>
</blockquote>

<p>作为消费者，前两种能接受，第三种情况就MMP了，哈哈哈！！！这种情况一般有如下两种解决方式：</p>

<blockquote>
  <ol>
    <li>服务方提供一个查询操作是否成功的api，第一次超时之后，调用方调用查询接口，如果查到了就走成功的流程，失败了就走失败的流程。</li>
    <li>另一种就是服务方需要使用幂等的方式保证一次和多次的请求结果一致。</li>
  </ol>
</blockquote>

<h2 id="http的幂等性">HTTP的幂等性</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">GET</code>：只是获取资源，对资源本身没有任何副作用，天然的幂等性。</li>
  <li><code class="language-plaintext highlighter-rouge">HEAD</code>：本质上和GET一样，获取头信息，主要是探活的作用，具有幂等性。</li>
  <li><code class="language-plaintext highlighter-rouge">OPTIONS</code>：获取当前URL所支持的方法，因此也是具有幂等性的。</li>
  <li><code class="language-plaintext highlighter-rouge">DELETE</code>：用于删除资源，有副作用，但是它应该满足幂等性，比如根据id删除某一个资源，调用方可以调用N次而不用担心引起的错误（根据业务需求而变）。</li>
  <li><code class="language-plaintext highlighter-rouge">PUT</code>：用于更新资源，有副作用，但是它应该满足幂等性，比如根据id更新数据，调用多次和N次的作用是相同的（根据业务需求而变）。</li>
  <li><code class="language-plaintext highlighter-rouge">POST</code>：用于添加资源，多次提交很可能产生副作用，比如订单提交，多次提交很可能产生多笔订单。</li>
</ul>

<h2 id="幂等性的实现方式">幂等性的实现方式</h2>

<p>对于客户端交互的接口，可以在前端拦截一部分，比如防止表单重复提交，按钮置灰，隐藏，不可点击等方式。但是前端进行拦截显然是针对普通用户而言的，懂点技术的都可以模拟请求调用接口，所以后端幂等性十分重要。</p>

<p>后端的幂等性如何? 将会从以下几个方面介绍</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">数据库去重表</code>
    <blockquote>
      <p>在往数据库中插入数据的时候，利用数据库唯一索引特性，保证数据唯一。比如订单的流水号，也可以是多个字段的组合。
实现比较简单，读者可以自己实现看看，这里就不再提供demo了。</p>
    </blockquote>
  </li>
  <li><code class="language-plaintext highlighter-rouge">状态机</code>
    <blockquote>
      <p>很多业务中有多个状态，比如订单的状态有提交、待支付、已支付、取消、退款等等状态。后端可以根据不同的状态去保证幂等性，比如在退款的时候，一定要保证这笔订单是已经支付过的状态。
业务中常常出现，读者可以自己实现看看，不再这里提供demo</p>
    </blockquote>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Token机制</code>
    <blockquote>
      <p>针对客户端连续点击或者调用方的超时重试等情况，例如提交订单，此种操作就可以用Token的机制实现防止重复提交</p>
    </blockquote>
  </li>
</ul>

<p>那么Token机制如何实现呢?</p>

<p>简单的说就是调用方在调用接口的时候先向后端请求一个全局ID(TOKEN), 请求的时候携带这个全局ID一起请求，操作流程如下所示:</p>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggac5kab8yj30on0nc75t.jpg" alt="" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">主要的流程步骤如下</code>:</p>

  <ul>
    <li>1.客户端先发送获取token的请求，服务端会生成一个全局唯一的ID保存在redis中，同时会把这个ID返回给客户端。</li>
    <li>2.客户端调用业务请求的时候必须带上这个token,一般会放在请求头上。</li>
    <li>3.服务端会校验这个Token，如果校验成功，则执行业务。</li>
    <li>4.如果校验失败，则表示重复操作，直接返回指定的结果给客户端。</li>
  </ul>
</blockquote>

<p>通过以上的流程分析，唯一的重点就是这个全局唯一的ID如何生成，在分布式服务中往往都会有一个生成全局ID的服务来保证ID的唯一性，但是工程量和实现难度比较大，UUID的数据量相对有些大，此处选择的是雪花算法来生成全局唯一ID。</p>

<h2 id="token代码实现">TOKEN代码实现</h2>
<p>我选择的的环境是Golang+Redis单机环境+middleware的方式实现的，只是演示一下思想，具体的代码可以参照实现下.</p>

<p>redis如何实现，获取Token接口将全局唯一ID存入Redis(一定要设置失效时间，根据业务需求)，业务请求的时候直接从redis中删除，根据delete的返回值判断，返回true表示第一次请求，返回fakse表示重复请求。代码如下:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"encoding/json"</span>
    <span class="s">"fmt"</span>
    <span class="s">"log"</span>
    <span class="s">"net/http"</span>

    <span class="s">"github.com/go-redis/redis"</span>
    <span class="s">"github.com/rs/xid"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">cache</span> <span class="o">*</span><span class="n">redis</span><span class="o">.</span><span class="n">Client</span>

<span class="k">type</span> <span class="n">Response</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Code</span> <span class="kt">int</span>         <span class="s">`json:"code"`</span> <span class="c">// code为0时，表示成功</span>
    <span class="n">Data</span> <span class="k">interface</span><span class="p">{}</span> <span class="s">`json:"data"`</span>
    <span class="n">Msg</span>  <span class="kt">string</span>      <span class="s">`json:"msg"`</span> <span class="c">// code != 0 时的错误信息</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">ResponseJson</span><span class="p">(</span><span class="n">code</span> <span class="kt">int</span><span class="p">,</span> <span class="n">msg</span> <span class="kt">string</span><span class="p">,</span> <span class="n">data</span> <span class="k">interface</span><span class="p">{})</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="n">response</span> <span class="o">:=</span> <span class="n">Response</span><span class="p">{</span>
        <span class="n">Code</span><span class="o">:</span> <span class="n">code</span><span class="p">,</span>
        <span class="n">Msg</span><span class="o">:</span>  <span class="n">msg</span><span class="p">,</span>
        <span class="n">Data</span><span class="o">:</span> <span class="n">data</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="n">res</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
    <span class="k">return</span> <span class="kt">string</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">//初始化cache 和一些其他的基本操作</span>
<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">addr</span> <span class="o">=</span> <span class="s">"127.0.0.1:6379"</span>
    <span class="k">var</span> <span class="n">password</span> <span class="o">=</span> <span class="s">""</span>

    <span class="n">cache</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="n">redis</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
        <span class="n">Addr</span><span class="o">:</span>     <span class="n">addr</span><span class="p">,</span>
        <span class="n">Password</span><span class="o">:</span> <span class="n">password</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">cache</span><span class="o">.</span><span class="n">Ping</span><span class="p">()</span><span class="o">.</span><span class="n">Result</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"redis kill"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">getToken</span><span class="p">(</span><span class="n">rw</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">//使用xid 生成web的全球唯一id</span>
    <span class="n">nextId</span> <span class="o">:=</span> <span class="n">xid</span><span class="o">.</span><span class="n">New</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">()</span>
    <span class="c">//存储到redis中去，并设置3分钟失效</span>
    <span class="n">cache</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="s">"SETEX"</span><span class="p">,</span> <span class="n">nextId</span><span class="p">,</span> <span class="m">1800</span><span class="p">,</span> <span class="n">nextId</span><span class="p">)</span>

    <span class="c">//返回该token</span>
    <span class="c">//返回订单成功</span>
    <span class="n">rw</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"Application/json"</span><span class="p">)</span>
    <span class="n">jsonRes</span> <span class="o">:=</span> <span class="n">ResponseJson</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="s">"下发token成功"</span><span class="p">,</span> <span class="n">nextId</span><span class="p">)</span>
    <span class="n">rw</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">jsonRes</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">createOrder</span><span class="p">(</span><span class="n">rw</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">//保存订单</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"订单创建成功"</span><span class="p">)</span>
    <span class="c">//返回订单成功</span>
    <span class="n">jsonRes</span> <span class="o">:=</span> <span class="n">ResponseJson</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="s">"下单成功"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="c">//删除token</span>
    <span class="n">token</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"token"</span><span class="p">)</span>
    <span class="n">delToken</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="c">//返回结果</span>
    <span class="n">rw</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"Application/json"</span><span class="p">)</span>
    <span class="n">rw</span><span class="o">.</span><span class="n">WriteHeader</span><span class="p">(</span><span class="m">200</span><span class="p">)</span>
    <span class="n">rw</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">jsonRes</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">delToken</span><span class="p">(</span><span class="n">token</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cache</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="s">"DEL"</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">checkExists</span><span class="p">(</span><span class="n">token</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="n">res</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">cache</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="s">"EXISTS"</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">Bool</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">res</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">middle</span><span class="p">(</span><span class="n">h</span> <span class="n">http</span><span class="o">.</span><span class="n">Handler</span><span class="p">)</span> <span class="n">http</span><span class="o">.</span><span class="n">Handler</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">rw</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="c">//查看是否携带token</span>
        <span class="n">token</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"token"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">token</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"请求非法"</span><span class="p">)</span>
            <span class="n">jsonRes</span> <span class="o">:=</span> <span class="n">ResponseJson</span><span class="p">(</span><span class="m">1001</span><span class="p">,</span> <span class="s">"请求非法"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
            <span class="n">rw</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">jsonRes</span><span class="p">))</span>
            <span class="n">rw</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"Application/json"</span><span class="p">)</span>
            <span class="n">rw</span><span class="o">.</span><span class="n">WriteHeader</span><span class="p">(</span><span class="m">400</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="c">//token是否有效</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">checkExists</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">jsonRes</span> <span class="o">:=</span> <span class="n">ResponseJson</span><span class="p">(</span><span class="m">1002</span><span class="p">,</span> <span class="s">"请求重复"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
            <span class="n">rw</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"Application/json"</span><span class="p">)</span>
            <span class="n">rw</span><span class="o">.</span><span class="n">WriteHeader</span><span class="p">(</span><span class="m">400</span><span class="p">)</span>
            <span class="n">rw</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">jsonRes</span><span class="p">))</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="c">//然后才是第一次请求 执行相应的自己原来的请求逻辑</span>
        <span class="n">h</span><span class="o">.</span><span class="n">ServeHTTP</span><span class="p">(</span><span class="n">rw</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">http</span><span class="o">.</span><span class="n">Handle</span><span class="p">(</span><span class="s">"/token"</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span><span class="n">getToken</span><span class="p">))</span>
    <span class="n">http</span><span class="o">.</span><span class="n">Handle</span><span class="p">(</span><span class="s">"/order"</span><span class="p">,</span> <span class="n">middle</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span><span class="n">createOrder</span><span class="p">)))</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">":8080"</span><span class="p">,</span> <span class="no">nil</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="效果演示">效果演示</h2>
<ul>
  <li>
    <p>1.发送getToken的请求获取Token：
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggboih8423j313e0bljsj.jpg" alt="" /></p>
  </li>
  <li>
    <p>2.携带token下单第一次：
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggboiyg25qj31070b0dgr.jpg" alt="" /></p>
  </li>
  <li>
    <p>3.第二次下单：
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggbojr7rw0j310e0atq3w.jpg" alt="" /></p>
  </li>
</ul>

<h2 id="总结">总结</h2>
<blockquote>
  <p>至此幂等性的定义和幂等性的实现方式已经介绍完了，本篇文章介绍了三种实现幂等性的方式，读者可以在实际开发中根据业务需求使用对应的方式.</p>
</blockquote>
:ET