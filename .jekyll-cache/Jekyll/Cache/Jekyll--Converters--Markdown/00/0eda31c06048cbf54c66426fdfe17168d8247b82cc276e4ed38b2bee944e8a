I"1<h2 id="前言">前言</h2>
<p>本文是学习MYSQL45讲 第一篇专栏学习笔记的总结.
主要是从一个整体全貌的高度来理解的。下图为林晓斌老师给画出来的MYSQL的基本架构示意图.</p>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giv18bbyz6j31400u0tpc.jpg" alt="" /></p>

<h3 id="笔记知识点">笔记知识点:</h3>
<ul>
  <li>大体来说, <code class="language-plaintext highlighter-rouge">MYSQL可以分为SERVER层和存储引擎层两部分</code></li>
  <li><code class="language-plaintext highlighter-rouge">Server层</code>处理逻辑，缓存，优化器，权限检验。包括连接器、查询缓存、分析器、优化器、执行器等，提供核心服务功能，以及所有的内置函数(如日期、时间、数学和加密函数等)，所有跨引擎的功能都在这一层实现，比如存储过程、触发器、试图等。</li>
  <li>而<code class="language-plaintext highlighter-rouge">存储引擎层</code>负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。其中InnoDB已经成为5.5.5版本后的默认的存储引擎。</li>
  <li>也就是说，<code class="language-plaintext highlighter-rouge">不同的存储引擎</code>共用一个<code class="language-plaintext highlighter-rouge">Server层</code>, <code class="language-plaintext highlighter-rouge">也就是从连接器到执行器的部分</code>。</li>
</ul>

<h2 id="连接器">连接器</h2>

<blockquote>
  <p>连接器负责跟客户端<code class="language-plaintext highlighter-rouge">建立连接</code>、<code class="language-plaintext highlighter-rouge">获取权限</code>、<code class="language-plaintext highlighter-rouge">维持和管理连接</code>。</p>
</blockquote>

<h3 id="笔记知识点-1">笔记知识点:</h3>
<ul>
  <li>在完成经典的TCP握手之后，连接器就要开始认证你的身份，这个时候就是你输入的用户名和密码， 或者走ssh 免密登录。</li>
  <li>如果用户名或者密码不对的话，你就会收到一个”Access denined for user” 的错误，然后客户端程序结束执行。</li>
  <li>如果用户名和密码认证通过, 连接器就会到权限表里面查出你这个用户所拥有的权限，之后，这个里面的判断逻辑，都将依赖此时读到的权限.</li>
  <li>这也就意味着,一个用户建立连接之后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限，<code class="language-plaintext highlighter-rouge">修改权限完成后，只有再新建的连接才会使用新的权限设置</code>。 <code class="language-plaintext highlighter-rouge">也即是需要重新登录才能使新的权限设置生效</code></li>
  <li>但是权限这里后面还会继续分析，有的可以不用重新建立连接也可以刷新权限到内存中。</li>
  <li>连接完成后，如果没有后续的动作，这个连接就处于空闲状态，你可以在<code class="language-plaintext highlighter-rouge">show processlist</code>命令中看到它，如果<code class="language-plaintext highlighter-rouge">Command</code>列显示为<code class="language-plaintext highlighter-rouge">Sleep</code>，就表示现在系统里面有一个空闲连接。</li>
  <li>客户端如果太长时间没有动静的话，连接器就会自动将它断开，这个时间是由参数<code class="language-plaintext highlighter-rouge">wait_timeout</code>控制的，默认值是8小时。</li>
  <li>如果连接在被断开之后，客户端再次发送请求的话，就会收到一个错误提醒。这个时候如果你要继续的话，就需要重连，然后再执行请求了。</li>
  <li>在数据库里面，<code class="language-plaintext highlighter-rouge">长连接是指连接成功之后，如果客户端持续有请求，则一直使用同一个连接。</code> 短连接是指每次执行完很少的几次查询就会断开连接，下次查询再重新建立一个。<code class="language-plaintext highlighter-rouge">所以在mysql数据库中，推荐尽量减少连接的动作，也就是尽量使用长连接</code>。</li>
  <li>但是全部使用长连接后，会发现MYSQL占用内存涨的特别快，这是因<code class="language-plaintext highlighter-rouge">MYSQL在执行过程中临时使用的内存是管理在连接对象里的。这些资源会在连接断开的时候才释放</code>。所以如果长连接累积起来，就可能导致内存占用太大，被系统强行杀掉(OOM),从现象来看就是<code class="language-plaintext highlighter-rouge">MYSQL异常重启了</code>。</li>
</ul>

<h3 id="mysql长连接耗用内存解决方案">MYSQL长连接耗用内存解决方案</h3>
<ul>
  <li>1.定期断开长连接，使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，则断开连接，之后要查询再重连。</li>
  <li>2.如果你使用的是<code class="language-plaintext highlighter-rouge">MYSQL 5.7</code>或者后面更新的版本的话，可以在每次执行一个比较大的操作后，通过执行<code class="language-plaintext highlighter-rouge">mysql_reset_connection</code>来重新初始化连接资源。这个过程不需要重连和重新做权限校验验证，但是会将连接恢复到刚刚创建完时的状态。</li>
</ul>
:ET