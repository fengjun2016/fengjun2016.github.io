I"<h1 id="linux进程间通信方式">Linux进程间通信方式</h1>
<p>首先，进程之间为什么需要进行通信呢? 主要有以下应用场景:</p>
<ul>
  <li>数据传输: 一个进程需要将它的数据发送给另一个进程，发送的数据量在一个字节到几兆字节之间。</li>
  <li>共享数据: 多个进程想要操作共享数据，一个进程对共享数据的修改，别的进程应该立刻看到。</li>
  <li>通知数据: 一个进程需要向另一个或者一组进程发送消息，通知它(它们)发生了某种事件(如进程终止时要通知父进程)。</li>
  <li>资源共享: 多个进程之间共享同样的资源。为了操作到这一点，需要内核提供锁和同步机制。</li>
  <li>进程控制: 有些进程希望完全控制另一个进程的执行(如 Debug进程), 此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。</li>
</ul>

<p>其次，进程之间通信有哪些手段呢?</p>
<ul>
  <li>管道(pipe)
    <blockquote>
      <p>管道包括三种方式:</p>
    </blockquote>
    <ul>
      <li>普通管道pipe: 通常有两种限制，一种是单工，只能单向传输; 二是只能在父子进程或者兄弟进程间使用。</li>
      <li>流管道s_pipe:去除了第一种限制, 为半双工, 只能在父子或兄弟进程之间使用，可以进行双向传输。</li>
      <li>命名管道name_pipe: 去除了第二种限制，可以在许多并不相关的进程之间进行通讯。</li>
    </ul>
  </li>
  <li>信号量(semophore)
    <blockquote>
      <p>信号量是一个计数器，可以控制多个进程对共享资源的访问。它常常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为<code class="language-plaintext highlighter-rouge">进程间</code>以及<code class="language-plaintext highlighter-rouge">同一进程</code>内<code class="language-plaintext highlighter-rouge">不同线程</code>之间的<code class="language-plaintext highlighter-rouge">同步</code>手段。</p>
    </blockquote>
  </li>
  <li>消息队列(message queue)
    <blockquote>
      <p>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>
    </blockquote>
  </li>
  <li>信号(signal)
    <blockquote>
      <p>信号是一种比较复杂的通信方式，用于通知接收进程某个时间已经发生。<code class="language-plaintext highlighter-rouge">这个也是golang采用的一种通信的方式</code></p>
    </blockquote>
  </li>
  <li>共享内存(shared memory)
    <blockquote>
      <p>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但是多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量来配合使用，来实现进程间的同步和通信。</p>
    </blockquote>
  </li>
  <li>套接字
    <blockquote>
      <p>套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于<code class="language-plaintext highlighter-rouge">不同机器</code>之间的<code class="language-plaintext highlighter-rouge">进程通信</code>。</p>
    </blockquote>
  </li>
</ul>

<h1 id="linux常用信号">Linux常用信号</h1>
<p>下面重点聊一聊, 进程间通信比较重要的一种方式: 信号。
Linix 支持的信号列表如下(请使用kill -l 命令自行查看)
我这边展示一下 mac Os上支持的信号列表, 并解释一下相应常用信号的含义:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">信号名称</th>
      <th style="text-align: center">编号</th>
      <th style="text-align: center">说明</th>
      <th style="text-align: left">行为</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">HUP</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">挂起信号</td>
      <td style="text-align: left">没有捕捉该信号，当收到该信号时，进程就会推出</td>
    </tr>
    <tr>
      <td style="text-align: center">INT</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">中断信号(Ctrl+C)</td>
      <td style="text-align: left">进程结束和core dump</td>
    </tr>
  </tbody>
</table>

:ET