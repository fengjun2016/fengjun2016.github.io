I"X<h2 id="前言">前言</h2>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Casbin</code>是什么?</p>
</blockquote>

<p>身份认证和授权对web应用的安全至关重要。<code class="language-plaintext highlighter-rouge">Casbin</code>是一个强大的、高效的开源访问控制框架，其权限管理机制支持多种访问控制模型。</p>

<p><code class="language-plaintext highlighter-rouge">Casbin</code>可以做到:</p>

<ul>
  <li>1.支持自定义请求的格式，默认的请求格式为{subject, object,action}</li>
  <li>2.具有访问控制模型model和策略policy两个核心概念。</li>
  <li>3.支持RBAC中的多层角色继承，不止主体可以有角色，资源也可以具有角色。</li>
  <li>4.支持超级用户，如root或Administrator, 超级用户可以不搜授权策略的约束访问任意资源。</li>
  <li>5.支持多种内置的操作符，如keyMatch, 方便对路径式的资源进行管理，如/foo/bar 可以隐射到/foo*</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Casbin</code>不能做到:</p>
<ul>
  <li>1.身份认证authentication(即验证用户的用户名、密码), casbin只负责访问控制。应该有其他专门的组件负责身份认证，然后由casbin进行访问控制，二者是相互配合的关系。</li>
  <li>2.管理用户列表或者角色列表。Casbin认为由项目自身来管理用户、角色列表更为合适，用户通常有他们的密码，但是Casbin的设计思想并不是把它作为一个存储密码的容器。而是存储RBAC方案中用户和角色之间的隐射关系。</li>
</ul>

<h2 id="安装">安装</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/casbin/casbin
</code></pre></div></div>

<h2 id="开始使用">开始使用</h2>
<p>创建一个Casbin决策器需要有一个模型文件和策略文件作为参数:</p>
<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/casbin/casbin"</span>

<span class="n">e</span> <span class="o">:=</span> <span class="n">casbin</span><span class="o">.</span><span class="n">NewEnforcer</span><span class="p">(</span><span class="s">"path/to/model.conf"</span><span class="p">,</span> <span class="s">"path/to/policy.csv"</span><span class="p">)</span>
</code></pre></div></div>
<p>注意：也可以使用DB中的策略初始化一个决策器，细节部分可以看 策略存储部分。</p>

<p>在访问发生之前，在代码中添加强制挂钩:
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggjn1ke394j30po0kcdj7.jpg" alt="" /></p>

<h2 id="工作原理">工作原理</h2>

<p>在Casbin中，访问控制模型被抽象为基于PERM(Policy(策略), Effect(效果), Request(请求), Matcher(匹配器))的一个文件。因此，切换或升级项目的授权机制与修改配置一样简单。您可以通过组合可用的模型来定制您自己的访问控制模型。例如,您可以在一个model中获得RBAC角色和ABAC属性，并共享一组policy规则。</p>

<p>Casbin中最基本、最简单的model是ACL。ACL中的model CONF 为:
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggjmsoyn83j30zi0rcwim.jpg" alt="" /></p>

<p>ACL model的示例policy如下:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p, alice, data1, read
p, bob, data2, write
</code></pre></div></div>

<p>这表示:
    * alice 可以读取data1
    * bob 可以编写data2</p>

<p>对于过长的单行配置，您也可以通过再结尾处添加”"进行断行：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#匹配器
[matchers]
m = r.sub = p.sub &amp;&amp; r.obj == p.obj \
 &amp;&amp; r.act = p.act
</code></pre></div></div>

<p>此外，对于ABAC, 您可以在Casbin golang版本中尝试下面的操作:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 匹配器
[matchers]
m = r.obj == p.obj &amp;&amp; r.act == p.act || r.obj in ('data2', 'data3')
</code></pre></div></div>

<p>但是你应该确保数组的长度大于1,否则的话将会导致panic。</p>

<h2 id="工作原理个人见解和理解">工作原理个人见解和理解</h2>
<p>model.conf 定义了一个共享的策略规则 而csv或者往db中存储的是设置的满足model定义的策略。</p>

<h2 id="go代码示例">go代码示例</h2>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggjszxagn6j30u04b2u0x.jpg" alt="" /></p>
:ET