I"#
<h2 id="列出镜像">列出镜像</h2>

<p>要想列出已经下载下来的镜像，可以使用 docker image ls 命令。</p>
<h2 id="运行">运行</h2>

<p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的ubuntu:18.04为例,如果我们打算启动里面的bash并且进行交互式操作的话，可以执行下面的命令。
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5izbf5plj31b80rcdmf.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">docker run</code>就是运行容器的命令</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-it</code>: 这是两个参数，一个是<code class="language-plaintext highlighter-rouge">-i</code>: 交互式操作，一个是<code class="language-plaintext highlighter-rouge">-t</code>终端。我们这里打算进入<code class="language-plaintext highlighter-rouge">bash</code>执行一些命令并查询返回结果，因此我们需要交互式终端。</li>
  <li><code class="language-plaintext highlighter-rouge">--rm</code>: 这个参数就是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动<code class="language-plaintext highlighter-rouge">docker rm</code>。我们这里只是随便执行了命令，看看结果，不需要排障和保留结果，因此使用<code class="language-plaintext highlighter-rouge">--rm</code>可以避免浪费空间。</li>
  <li><code class="language-plaintext highlighter-rouge">ubuntu:18.04</code>: 这里指用<code class="language-plaintext highlighter-rouge">ubuntu:18.04</code>镜像为基础来启动容器。</li>
  <li>·<code class="language-plaintext highlighter-rouge">bash</code>: 放在镜像名后的是 <code class="language-plaintext highlighter-rouge">命令</code>, 这里我们希望有个交互式<code class="language-plaintext highlighter-rouge">shell</code>，因此用的是<code class="language-plaintext highlighter-rouge">bash</code>。</li>
</ul>

<p>进入容器后，我们可以在 <code class="language-plaintext highlighter-rouge">Shell</code> 下操作，执行任何所需的命令。这里，我们执行了 <code class="language-plaintext highlighter-rouge">cat /etc/os-release</code>，这是 <code class="language-plaintext highlighter-rouge">Linux</code> 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 18.04.1 LTS 系统。
最后我们通过<code class="language-plaintext highlighter-rouge">exit</code> 退出了这个容器。</p>
:ET